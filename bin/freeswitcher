#!/usr/bin/env ruby

require 'rubygems'
require 'eventmachine'
require 'pp'

module FreeSwitcher
  class Event
    def self.from(data)
      instance = new

      capture = header = {}
      body = {}

      data.each_line do |line|
        line.strip!

        case line
        when ''
          capture = body
        when /([a-zA-Z0-9-]+):\s*(.*)/
          capture[$1] = $2
        end
      end

      instance.header.merge!(header)
      instance.body.merge!(body)
      instance
    end

    attr_reader :header, :body

    def initialize(header = {}, body = {})
      @header, @body = header, body
    end

    def [](key)
      @header.merge(@body)[key]
    end
  end

  module Client
    def post_init
      say('auth ClueCon')
      say('event plain ALL')
    end

    def receive_data(data)
      pp Event.from(data)
    end

    def say(line)
      send_data("#{line}\n\n")
    end
  end

  module Server
    def receive_data(data)
      send_data "Sending #{data}"
      $CONTROLLER.send_client_data(data)  # Not a fan of this global
    end
  end

end

class Controller
 
  def initialize
    # I hate to define this global, have any other ideas?
    
    $CONTROLLER = self 
  end

  def run!
    
    puts "Connecting...."
     begin
      @connections = Thread.new do
        EventMachine::run {
          Thread.current[:client]     = EventMachine::connect "localhost", 8021, FreeSwitcher::Client
          Thread.current[:controller] = EventMachine::start_server "localhost", 9000, FreeSwitcher::Server
          puts "Connected!"
        }
      end
      @connections.join
     rescue
       puts "Unable to connect"
    end
  end

  def send_client_data(data)
    @connections[:client].send_data("#{data}\n\n")
  end

end

if __FILE__ == $0
  app = Controller.new
  app.run!
end

