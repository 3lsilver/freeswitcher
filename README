=========================================================
FreeSWITCHeR
Copyright (c) 2009 The Rubyists (Jayson Vaughn, Tj Vanderpoel, Michael Fellinger, Kevin Berry) 
Distributed under the terms of the MIT License.
==========================================================

About
-----
*** STILL UNDER HEAVY DEVELOPMENT ***

A ruby library for interacting with the "FreeSWITCH" (http://www.freeswitch.org) opensource telephony platform

*** STILL UNDER HEAVY DEVELOPMENT ***

Requirements
------------
- ruby (>= 1.8)
- eventmachine (If you wish to use Outbound and Inbound listener)

Usage
-----

Example of originating a new call in 'irb' using FSR::CommandSocket#originate:

  irb(main):001:0> require 'fsr'
  => true

  irb(main):002:0> FSR.load_all_commands
  => [:sofia, :originate]

  irb(main):003:0> sock = FSR::CommandSocket.new
  => #<FSR::CommandSocket:0xb7a89104 @server="127.0.0.1", @socket=#<TCPSocket:0xb7a8908c>, @port="8021", @auth="ClueCon">

  irb(main):007:0> sock.originate(:target => 'sofia/gateway/carlos/8179395222', :endpoint => FSR::App::Bridge.new("user/bougyman")).run
  => {"Job-UUID"=>"732075a4-7dd5-4258-b124-6284a82a5ae7", "body"=>"", "Content-Type"=>"command/reply", "Reply-Text"=>"+OK Job-UUID: 732075a4-7dd5-4258-b124-6284a82a5ae7"}


Example of creating an Outbound Eventsocket listener:

    #!/usr/bin/env ruby

    require 'rubygems'
    require 'eventmachine'
    require 'fsr'
    require "fsr/listener/outbound"

    module OesDemo
      include FSR::Listener::Outbound
      def session_initiated(session)
        bridge "user/bougyman"
      end

      def reply_received(command_reply)
        puts "Received response: #{command_reply}"
      end

    end
    EM.run do
      port = 1888
      host = "127.0.0.1"
      EventMachine::start_server(host, port, OesDemo)
      FSR::Log.debug "* FreeSWITCHeR OES Listener on #{host}:#{port}"
    end

Support
-------
Home page at http://code.rubyists.com/projects/fs
#rubyists on FreeNode
